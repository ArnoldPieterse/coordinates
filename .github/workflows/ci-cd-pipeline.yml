name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm test

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Playwright E2E tests
      run: npx playwright test tests/integration/rekursing-auth-presence.spec.js
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          reports/
          
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run dependency check
      run: npm audit fix --dry-run
      
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: |
          npm-audit.json
          reports/security/
          
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run build validation
      run: npm run validate:build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          build/
          
  quality:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Run quality checks
      run: |
        npm run quality:check
        npm run accessibility:test
        npm run performance:audit
        
    - name: Generate quality report
      run: npm run quality:report
      
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-report
        path: reports/quality/
        
  deploy-staging:
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Setup AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        npm run deploy:staging
        
    - name: Run staging tests
      run: |
        echo "Running staging environment tests..."
        npm run test:staging
        
  deploy-production:
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Setup AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        npm run deploy:production
        
    - name: Run production tests
      run: |
        echo "Running production environment tests..."
        npm run test:production
        
    - name: Update DNS records
      run: |
        echo "Updating DNS records..."
        npm run dns:update
        
    - name: Invalidate CloudFront cache
      run: |
        echo "Invalidating CloudFront cache..."
        npm run cloudfront:invalidate
        
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        echo "Deployment completed successfully"
        # Add notification logic here (Slack, email, etc.)
        
    - name: Update deployment status
      run: |
        echo "Updating deployment status..."
        npm run status:update 